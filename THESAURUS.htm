<html xmlns="http://www.w3.org/199/xhtml" lang="fr" xml:lang="fr">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Thesaurus</title>

    <link rel="stylesheet" href="css/jeu.css" />

  <script type="text/javascript" src="js/WebGl.js"></script>
  <script type="text/javascript" src="js/ShaderCouleursTextures.js"></script>
  <script type="text/javascript" src="js/glMatrix-0.9.5.min.js"></script>
  <script type="text/javascript" src="js/Transformations.js"></script>
  <script type="text/javascript" src="js/Camera.js"></script>
  <script type="text/javascript" src="js/Sol.js"></script>
  <script type="text/javascript" src="js/Murs.js"></script>
  <script type="text/javascript" src="js/murs_internes.js"></script>
  <script type="text/javascript" src="js/Textures.js"></script>
  <script type="text/javascript" src="js/timer.js"></script>
  <script type="text/javascript" src="js/points.js"></script>
  <script type="text/javascript" src="js/tresor.js"></script>
  <script type="text/javascript" src="js/fleche.js"></script>
  <script type="text/javascript" src="js/Joueur.js"></script>
  <script type="text/javascript" src="js/Teleportor.js"></script>
  <script type="text/javascript" src="js/Reciever.js"></script>
  <script type="text/javascript" src="js/Transportation.js"></script>
  <script type="text/javascript" src="js/Ciel.js"></script>
  <script type="text/javascript" src="js/audio.js"></script>
  <script type="text/javascript" src="js/spawn_door.js"></script>
  <script type="text/javascript" src="js/spawn_room.js"></script>

  <script type="text/javascript" src="js/gameOver.js"></script>
  <script type="text/javascript" src="js/menu.js"></script>
  <script type="text/javascript">

    var objgl = null;
    var objProgShaders = null;
    var objScene3D = null;
    var objCycleAnimation = null;

      var OBJ3D_SOL = 0;
      var OBJ3D_MURS = 1;
      var OBJ3D_TRESOR = 2;
      var OBJ3D_FLECHE = 3;
      var OBJ3D_MURS_INTERNES = null;
      var OBJ3D_MURS_INTERNES_DOOR = null;
      var OBJ3D_MURS_SPAWN = null;

      let keysPressed = {};
      let movementSpeed = 2.5; // units per second
      let lastFrameTime = performance.now();
      let cameraYaw = 0; // left-right (horizontal)
      let cameraPitch = 0; // up-down (vertical

      let isChestInteractionLocked = false;

      var nbrFleches = 18;
      var nbTeleporteur = 0; // Number of teleporters in the game
      var nbReciever = 0;

      var binAriel = false;
      let showAllObjectsInAerial = false; // Add new global variable

      let isMouseLocked = false;
      let lastMouseX = 0;
      let lastMouseY = 0;
      const MOUSE_SENSITIVITY = 0.2; // Adjust this value to change mouse sensitivity

      let isWallAnimating = false;

      var tabImages = [
        "images/Transparent.gif",
        "images/new_floor.png",
        "images/new_wall.png",
        "images/teleporter.jpg",
        "images/reciever.jpg",
        "images/sky.jpg",
        "images/tresure_texture.jpg",
      ];
      var TEX_TRANSPARENT = 0;
      var TEX_SOL = 1;
      var TEX_MUR = 2;

      var TEX_TELEPORTEUR = 3;
      var TEX_RECIEVER = 4;
      var TEX_CIEL = 5;
      var TEX_TRESOR = 6;

      var savedLevelObject = {};
      let savedLevelObjects = {
        chest: null,
        arrows: [],
        teleporters: [],
        receivers: []
      };

      var tabMapOriginal = getTabMurs().map((row) => [...row]);
      var tabPosJoueur;
      var tabCibleJoueur;
      var tabPosJoueurInitial;
      var tabCibleJoueurInitial;
      var tabOrientationJoueur;
      var largeurJeux = 31;
      var outsideSpawnRoom = false;

      var nbrOuvreursMurs = 4;
      var nbrOuvreursMursUtilises = nbrOuvreursMurs;

      var vueAerienne = false;

      var startTime = createDate();
      var timerLength = 60;
      setTimerMax(timerLength);
      var lastSec = 0;

      setPoint(300);

      let currentLevel = 1;
      const MAX_LEVELS = 10;

      async function demarrer() {
        var objCanvas = document.getElementById("monCanvas");
        objCanvas.focus();
        objgl = initWebGL(objCanvas);
        objProgShaders = initShaders(objgl);
        objScene3D = await initScene3D(objgl);

        initMouseControls(objCanvas);

        // Set canvas size based on window size while maintaining aspect ratio
        function resizeCanvas() {
          const aspectRatio = 1600 / 800; // Your original canvas dimensions
          const windowWidth = window.innerWidth * 0.9;
          const windowHeight = window.innerHeight * 0.9;

          if (windowWidth / windowHeight > aspectRatio) {
            objCanvas.height = windowHeight;
            objCanvas.width = windowHeight * aspectRatio;
          } else {
            objCanvas.width = windowWidth;
            objCanvas.height = windowWidth / aspectRatio;
          }

          // Update WebGL viewport
          objgl.viewport(0, 0, objCanvas.width, objCanvas.height);
        }

        // Call resize on start
        resizeCanvas();

        // Add event listener for window resize
        window.addEventListener("resize", resizeCanvas);

        effacerCanevas(objgl);
        dessiner(objgl, objProgShaders, objScene3D);
        resetCamera(objScene3D.camera, objScene3D);

        // Initialize and start background music
        initAudio();
        playBackgroundMusic();
        showWallTries();

        // Reset level at game start
        resetOrNextLevel(false);

        // Initialize level display
        updateLevelDisplay();

        animer();
      }

      // Un cycle d'animation
      function animer() {
        objCycleAnimation = requestAnimationFrame(animer);

        const now = performance.now();
        const deltaTime = (now - lastFrameTime) / 1000.0;
        lastFrameTime = now;

        updateMovement(deltaTime);
        updateInteractionPrompt();
        effacerCanevas(objgl);
        mettreAjourAnimation();
        dessiner(objgl, objProgShaders, objScene3D);
      }

      // Pour mettre Ã  jour l'animation
      async function mettreAjourAnimation() {
        var time = createDate();
        currentSec = nextSecond(time, startTime);
        showTime();

        if (
          getPositionCameraX(objScene3D.camera) < 11.9 &&
          outsideSpawnRoom == false
        ) {
          outsideSpawnRoom = true;
        }

        // Deduct points when in aerial view and force exit if points reach 0
        if (binAriel) {
          if (lastSec != currentSec) {
            updatePoint(false, 10); // Deduct 10 points every second
            lastSec = currentSec;

            // Force exit aerial view if points reach 0
            if (getPoints() <= 0) {
              // Reset to ground view
              const camera = objScene3D.camera;
              setPositionsCameraXYZ(tabPosJoueurInitial, camera);
              setCiblesCameraXYZ(tabCibleJoueurInitial, camera);
              setOrientationX(0, camera);
              updateHauteurCiel(2, obj3DCiel);
              binAriel = false;
              objScene3D.obj3DJoueur = null;
            }
          }
        }

        showPoints();
        startTime = time;

        if (timeOut()) {
          await resetNiveau();
          setTimerMax(timerLength);
          resetSeconds();
          updatePoint(false, 200);
        }
        showWallTries();
        animationFleche();
      }

      function updateMovement(deltaTime) {
        const camera = objScene3D.camera;
        if (binAriel) return;

        const speed = movementSpeed;
        const distance = speed * deltaTime;

        const dirX = getCibleCameraX(camera) - getPositionCameraX(camera);
        const dirZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
        const length = Math.sqrt(dirX * dirX + dirZ * dirZ);
        if (length === 0) return;

        const forwardX = dirX / length;
        const forwardZ = dirZ / length;

        const rightX = -forwardZ;
        const rightZ = forwardX;

        let moveX = 0;
        let moveZ = 0;

        if (keysPressed["KeyW"]) {
          moveX += forwardX;
          moveZ += forwardZ;
        }
        if (keysPressed["KeyS"]) {
          moveX -= forwardX;
          moveZ -= forwardZ;
        }
        if (keysPressed["KeyD"]) {
          moveX += rightX;
          moveZ += rightZ;
        }
        if (keysPressed["KeyA"]) {
          moveX -= rightX;
          moveZ -= rightZ;
        }

        // Store current position
        const oldX = getPositionCameraX(camera);
        const oldZ = getPositionCameraZ(camera);

        // Try moving on X axis only
        const newXOnly = oldX + moveX * distance;
        setPositionCameraX(newXOnly, camera);
        setPositionCameraZ(oldZ, camera);
        const canMoveX = !cameraDansMur(camera);

        // Try moving on Z axis only
        setPositionCameraX(oldX, camera);
        const newZOnly = oldZ + moveZ * distance;
        setPositionCameraZ(newZOnly, camera);
        const canMoveZ = !cameraDansMur(camera);

        // Reset position
        setPositionCameraX(oldX, camera);
        setPositionCameraZ(oldZ, camera);

        // Apply movement based on what's possible
        const finalX = canMoveX ? newXOnly : oldX;
        const finalZ = canMoveZ ? newZOnly : oldZ;

        setPositionCameraX(finalX, camera);
        setPositionCameraZ(finalZ, camera);

        // Update camera target
        if (canMoveX || canMoveZ) {
          const targetDeltaX = finalX - oldX;
          const targetDeltaZ = finalZ - oldZ;
          setCibleCameraX(getCibleCameraX(camera) + targetDeltaX, camera);
          setCibleCameraZ(getCibleCameraZ(camera) + targetDeltaZ, camera);
        }

        if (collisionTeleporteur(camera)) {
          console.log("teleport!");
        }

        // Check if any movement keys are pressed
        if (
          keysPressed["KeyW"] ||
          keysPressed["KeyS"] ||
          keysPressed["KeyA"] ||
          keysPressed["KeyD"]
        ) {
          startWalking();
        } else {
          stopWalking();
        }
      }

      function animationFleche() {
        // Animation de hovering
        const hoverAmplitude = 0.1; // Maximum height of amplitude
        const hoverVitesse = 3; // Speed of hovering
        const hoverOffset =
          Math.sin((Date.now() / 1000) * hoverVitesse) * hoverAmplitude;

        // Update only arrow objects
        objScene3D.tabObjets3D
          .filter((obj3D) => obj3D.baseY !== undefined) // Filter arrows
          .forEach((obj3D) => {
            setPositionY(obj3D.baseY + hoverOffset, obj3D.transformations);
          });
      }

    function animationMur(gridZ, gridX) {
      // Set animation flag
      isWallAnimating = true;
      
      // Play wall buy sound
      playWallBuySound();
      
      // First, mark this wall as being destroyed
      tabMurs[gridX][gridZ] = 3; // Use value 3 to mark as "being destroyed"
      
      // Create a new wall object specifically for this wall to animate
      const wallX = gridX + 0.5;
      const wallZ = gridZ + 0.5;
      
      const wallObj = createAnimatedWall(objgl, wallX, wallZ, TEX_MUR);
      objScene3D.tabObjets3D.push(wallObj);
      const wallIndex = objScene3D.tabObjets3D.length - 1;
      
      var obj3DMursInternes = creerObj3DMursInternes(objgl, TEX_MUR);
      objScene3D.tabObjets3D[OBJ3D_MURS_INTERNES] = obj3DMursInternes;
      
      const startTime = performance.now();
      const animationDuration = 1000; // Animation duration in milliseconds
      
      function animate(currentTime) {
          const elapsed = currentTime - startTime;
          const progress = Math.min(elapsed / animationDuration, 1);

          const easedProgress = 1 - Math.pow(1 - progress, 3);
          const newHeight = 1.0 * (1 - easedProgress);

          setEchelleY(
            newHeight,
            objScene3D.tabObjets3D[wallIndex].transformations
          );

          if (progress < 1) {
            requestAnimationFrame(animate);
          } else {
            // Animation complete - cleanup
            objScene3D.tabObjets3D.splice(wallIndex, 1);
            tabMurs[gridX][gridZ] = 0;
            nbrOuvreursMursUtilises--;
            showWallTries();
            updatePoint(false, 50);
            // Reset animation flag when complete
            isWallAnimating = false;
          }
        }

        requestAnimationFrame(animate);
      }

      async function initScene3D(objgl) {
        var objScene3D = new Object();
        var tabObjets3D = new Array();

        // Mettre les textures dans la scÃ¨ne
        objScene3D.textures = await creerTextures(objgl, tabImages);

        // CrÃ©er le sol
        var obj3DSol = creerObj3DSol(objgl, TEX_SOL);
        tabObjets3D.push(obj3DSol);
        OBJ3D_SOL = tabObjets3D.length - 1;

        // CrÃ©er les murs
        var obj3DMurs = creerObj3DMurs(objgl, obj3DSol, TEX_MUR);
        tabObjets3D.push(obj3DMurs);
        OBJ3D_MURS = tabObjets3D.length - 1;

        // Creer le tresor
        var obj3DTresor = creerobj3DTresor(objgl, obj3DMurs, TEX_TRESOR);
        tabObjets3D.push(obj3DTresor);
        OBJ3D_TRESOR = tabObjets3D.length - 1;

        // Get treasure position before creating arrows
        var tresorZ = getPositionZ(obj3DTresor.transformations);
        var tresorX = getPositionX(obj3DTresor.transformations);

        // Creer les fleches after we have treasure position
        for (let i = 0; i < nbrFleches; i++) {
          var obj3DFleche = creerobj3DFleche(objgl, tresorZ, tresorX);
          tabObjets3D.push(obj3DFleche);
        }

        // CrÃ©er le ciel
        var obj3DCiel = creerObj3DCiel(objgl, obj3DMurs, TEX_CIEL);
        tabObjets3D.push(obj3DCiel);

        // creer mur interne spawn
        var obj3DMurSpawn = creerObj3DMursSpawn(objgl, TEX_MUR);
        tabObjets3D.push(obj3DMurSpawn);
        OBJ3D_MURS_SPAWN = tabObjets3D.length - 1;

        // creer murs internes
        var obj3DMurInterne = creerObj3DMursInternes(objgl, TEX_MUR);
        tabObjets3D.push(obj3DMurInterne);
        OBJ3D_MURS_INTERNES = tabObjets3D.length - 1;

        // creer spawn room door
        var obj3DMurInterneDoor = creerObj3DMursDoor(objgl, TEX_MUR);
        tabObjets3D.push(obj3DMurInterneDoor);
        OBJ3D_MURS_INTERNES_DOOR = tabObjets3D.length - 1;

        // Mettre les objets 3D sur la scÃ¨ne
        objScene3D.tabObjets3D = tabObjets3D;

        // La camÃ©ra
        var camera = creerCamera();
        resetCamera(camera, objScene3D);
        objScene3D.camera = camera;

        // Assign tabObjets3D only once it's fully populated
        objScene3D.tabObjets3D = tabObjets3D;

        return objScene3D;
      }

      function dessiner(objgl, objProgShaders, objScene3D) {
        // La vue
        objgl.viewport(
          0,
          0,
          objgl.drawingBufferWidth,
          objgl.drawingBufferHeight
        );

        // Matrice de projection
        var matProjection = mat4.create();
        var fltRapportCanevas =
          objgl.drawingBufferWidth / objgl.drawingBufferHeight;
        mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);

        // Relier la matrice aux shaders
        objgl.uniformMatrix4fv(
          objProgShaders.matProjection,
          false,
          matProjection
        );

        for (var i = 0; i < objScene3D.tabObjets3D.length; i++) {
          const obj = objScene3D.tabObjets3D[i];

          // Skip objects in aerial view unless they're floor/walls or cheat is active
          if (binAriel && !showAllObjectsInAerial) {
            const isFloor = i === OBJ3D_SOL;
            const isWall =
              i === OBJ3D_MURS ||
              i === OBJ3D_MURS_INTERNES ||
              i === OBJ3D_MURS_SPAWN ||
              i === OBJ3D_MURS_INTERNES_DOOR;
            if (!isFloor && !isWall) {
              continue;
            }
          }

          var vertex = obj.vertex;
          var couleurs = obj.couleurs;
          var texels = obj.texels;
          var maillage = obj.maillage;
          var transformations = obj.transformations;

          // Matrice du modÃ¨le
          var matModeleVue = mat4.create();
          mat4.identity(matModeleVue);

          // Placer la camÃ©ra sur la scÃ¨ne
          mat4.lookAt(
            getPositionsCameraXYZ(objScene3D.camera),
            getCiblesCameraXYZ(objScene3D.camera),
            getOrientationsXYZ(objScene3D.camera),
            matModeleVue
          );

          // Appliquer les transformations sur le modÃ¨le
          mat4.translate(matModeleVue, getPositionsXYZ(transformations));
          mat4.scale(matModeleVue, getEchellesXYZ(transformations));
          mat4.rotateX(
            matModeleVue,
            (getAngleX(transformations) * Math.PI) / 180
          );
          mat4.rotateY(
            matModeleVue,
            (getAngleY(transformations) * Math.PI) / 180
          );
          mat4.rotateZ(
            matModeleVue,
            (getAngleZ(transformations) * Math.PI) / 180
          );

          // Relier la matrice aux shaders
          objgl.uniformMatrix4fv(
            objProgShaders.matModeleVue,
            false,
            matModeleVue
          );

          if (maillage == null)
            // Dessiner les sous-objets
            for (var j = 0; j < vertex.length; j++) {
              // Relier les vertex aux shaders
              objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
              objgl.vertexAttribPointer(
                objProgShaders.posVertex,
                3,
                objgl.FLOAT,
                false,
                0,
                0
              );
              var intNbVertex =
                objgl.getBufferParameter(
                  objgl.ARRAY_BUFFER,
                  objgl.BUFFER_SIZE
                ) /
                4 /
                3;

              // Relier les couleurs aux shaders
              objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
              objgl.vertexAttribPointer(
                objProgShaders.couleurVertex,
                4,
                objgl.FLOAT,
                false,
                0,
                0
              );

              // Activer la texture
              objgl.activeTexture(objgl.TEXTURE0 + texels[j].intNoTexture);
              objgl.bindTexture(
                objgl.TEXTURE_2D,
                objScene3D.textures[texels[j].intNoTexture]
              );

              // Relier les texels aux shaders
              objgl.bindBuffer(objgl.ARRAY_BUFFER, texels[j]);
              objgl.vertexAttribPointer(
                objProgShaders.posTexel,
                2,
                objgl.FLOAT,
                false,
                0,
                0
              );

              // Relier le no de texture et le taux de couleur aux shaders
              objgl.uniform1i(objProgShaders.noTexture, texels[j].intNoTexture);
              objgl.uniform1f(
                objProgShaders.pcCouleurTexel,
                texels[j].pcCouleurTexel
              );

              // Dessiner
              objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
            }
          else {
            // Dessiner le maillage

            // Relier les vertex aux shaders
            objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
            objgl.vertexAttribPointer(
              objProgShaders.posVertex,
              3,
              objgl.FLOAT,
              false,
              0,
              0
            );

            // Relier les couleurs aux shaders
            objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
            objgl.vertexAttribPointer(
              objProgShaders.couleurVertex,
              4,
              objgl.FLOAT,
              false,
              0,
              0
            );

            // Activer la texture
            objgl.activeTexture(objgl.TEXTURE0 + texels.intNoTexture);
            objgl.bindTexture(
              objgl.TEXTURE_2D,
              objScene3D.textures[texels.intNoTexture]
            );

            // Relier les texels aux shaders
            objgl.bindBuffer(objgl.ARRAY_BUFFER, texels);
            objgl.vertexAttribPointer(
              objProgShaders.posTexel,
              2,
              objgl.FLOAT,
              false,
              0,
              0
            );

            // Relier le no de texture et le taux de couleur aux shaders
            objgl.uniform1i(objProgShaders.noTexture, texels.intNoTexture);
            objgl.uniform1f(
              objProgShaders.pcCouleurTexel,
              texels.pcCouleurTexel
            );

            // SÃ©lectionner le maillage qu'on va utiliser pour les triangles et les droites
            objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

            // Dessiner les triangles
            objgl.drawElements(
              objgl.TRIANGLES,
              maillage.intNbTriangles * 3,
              objgl.UNSIGNED_SHORT,
              0
            );
            // Dessiner les droites Ã  la suite des triangles
            objgl.drawElements(
              objgl.LINES,
              maillage.intNbDroites * 2,
              objgl.UNSIGNED_SHORT,
              maillage.intNbTriangles * 2 * 3
            );
          }
        }

        // Draw player arrow in aerial view - IMPROVED SECTION
        if (binAriel && objScene3D.obj3DJoueur) {
          // Use the stored player arrow object
          const joueur = objScene3D.obj3DJoueur;

          // Set up model-view matrix for player arrow
          var matModeleVue = mat4.create();
          mat4.identity(matModeleVue);

          // Use aerial camera view
          mat4.lookAt(
            getPositionsCameraXYZ(objScene3D.camera),
            getCiblesCameraXYZ(objScene3D.camera),
            getOrientationsXYZ(objScene3D.camera),
            matModeleVue
          );

          // Apply transformations
          mat4.translate(matModeleVue, getPositionsXYZ(joueur.transformations));
          mat4.scale(matModeleVue, getEchellesXYZ(joueur.transformations));
          mat4.rotateX(
            matModeleVue,
            (getAngleX(joueur.transformations) * Math.PI) / 180
          );
          mat4.rotateY(
            matModeleVue,
            (getAngleY(joueur.transformations) * Math.PI) / 180
          );
          mat4.rotateZ(
            matModeleVue,
            (getAngleZ(joueur.transformations) * Math.PI) / 180
          );

          // Connect matrix to shaders
          objgl.uniformMatrix4fv(
            objProgShaders.matModeleVue,
            false,
            matModeleVue
          );

          // Set texture and color settings
          objgl.uniform1i(objProgShaders.noTexture, 0);
          objgl.uniform1f(objProgShaders.pcCouleurTexel, 0.0);

          // Connect vertex data
          objgl.bindBuffer(objgl.ARRAY_BUFFER, joueur.vertex);
          objgl.vertexAttribPointer(
            objProgShaders.posVertex,
            3,
            objgl.FLOAT,
            false,
            0,
            0
          );

          // Connect color data
          objgl.bindBuffer(objgl.ARRAY_BUFFER, joueur.couleurs);
          objgl.vertexAttribPointer(
            objProgShaders.couleurVertex,
            4,
            objgl.FLOAT,
            false,
            0,
            0
          );

          // Draw the player arrow
          objgl.drawArrays(objgl.TRIANGLES, 0, joueur.nbrVertex);
        }
      }
      //=====================================================
      function initMouseControls(canvas) {
        canvas.onclick = () => {
          canvas.requestPointerLock();
          canvas.focus();
        };

        document.onpointerlockchange = () => {
          isMouseLocked = document.pointerLockElement === canvas;
        };

        document.onmousemove = (e) => {
          if (!isMouseLocked || binAriel) return;

          const sensitivity = 0.002; // smooth sensitivity
          cameraYaw += (e.movementX * sensitivity * 180) / Math.PI;
          cameraPitch -= (e.movementY * sensitivity * 180) / Math.PI;

          // Clamp pitch to prevent flipping
          cameraPitch = Math.max(-85, Math.min(85, cameraPitch));

          updateCameraDirection();
        };
      }

      function updateCameraDirection() {
        const camera = objScene3D.camera;
        const yaw = (cameraYaw * Math.PI) / 180;
        const pitch = (cameraPitch * Math.PI) / 180;

        const x = Math.cos(pitch) * Math.sin(yaw);
        const y = Math.sin(pitch);
        const z = -Math.cos(pitch) * Math.cos(yaw);

        const pos = getPositionsCameraXYZ(camera);
        setCiblesCameraXYZ([pos[0] + x, pos[1] + y, pos[2] + z], camera);
      }

      //=====================================================

      function effacerCanevas(objgl) {
        // Met la couleur d'effacement au noir et complÃ©tement opaque
        objgl.clearColor(0.0, 0.0, 0.0, 1.0);
        // Efface les couleurs et le buffer de profondeur.
        objgl.clear(objgl.COLOR_BUFFER_BIT | objgl.DEPTH_BUFFER_BIT);
      }

      function handleKeyDown(event) {
        keysPressed[event.code] = true;

        var camera = objScene3D.camera;

        // Handle cheat code (CTRL+SHIFT+SPACE)
        if (
          event.code === "Space" &&
          event.ctrlKey &&
          event.shiftKey &&
          binAriel
        ) {
          showAllObjectsInAerial = !showAllObjectsInAerial;
          return;
        }

        // Add chest interaction with lock check
        if (
          event.code === "KeyE" &&
          isNearTresor(camera) &&
          !isChestInteractionLocked
        ) {
          isChestInteractionLocked = true; // Lock interaction
          // Hide prompt immediately when pressing E
          document
            .getElementById("interactionPrompt")
            .classList.remove("visible");
          handleChestInteraction(camera);
        }

        // Handle aerial view toggle
        if (event.code === "PageUp" && !binAriel && getPoints() >= 10) {
          tabPosJoueurInitial = getPositionsCameraXYZ(camera);
          tabCibleJoueurInitial = getCiblesCameraXYZ(camera);
          tabPosJoueur = getPositionsCameraXYZ(camera);
          tabCibleJoueur = getCiblesCameraXYZ(camera);
          setPositionsCameraXYZ([15, 40, 15], camera);
          setOrientationX(-90, camera);
          setCiblesCameraXYZ([15, 0, 15], camera);
          updateHauteurCiel(-2, obj3DCiel);
          binAriel = true;

          // Create player arrow and store it in the scene
          obj3DJoueur = creerObj3DJoueurFleche(
            objgl,
            tabPosJoueur,
            tabCibleJoueur
          );
          objScene3D.obj3DJoueur = obj3DJoueur;
        }

        // Handle back to ground view
        if (event.code === "PageDown" && binAriel) {
          setPositionsCameraXYZ(tabPosJoueurInitial, camera);
          setCiblesCameraXYZ(tabCibleJoueurInitial, camera);
          setOrientationX(0, camera);
          updateHauteurCiel(2, obj3DCiel);
          binAriel = false;
          objScene3D.obj3DJoueur = null;
        }

        var points = getPoints();
        // Handle wall removal
        if (event.code === "Space") {
          // Add check for isWallAnimating
          if (!isWallAnimating) {
            var posX = Math.floor(getPositionCameraX(camera));
            var posZ = Math.floor(getPositionCameraZ(camera));
            var cibleX = Math.floor(getCibleCameraX(camera));
            var cibleZ = Math.floor(getCibleCameraZ(camera));

            var dirX = cibleX - posX;
            var dirZ = cibleZ - posZ;

            var dirGridX = Math.round(
              dirX / Math.max(Math.abs(dirX), Math.abs(dirZ))
            );
            var dirGridZ = Math.round(
              dirZ / Math.max(Math.abs(dirX), Math.abs(dirZ))
            );

            var gridX = posX + dirGridX;
            var gridZ = posZ + dirGridZ;

            if (nbrOuvreursMursUtilises > 0) {
              if (
                tabMurs[gridZ] &&
                tabMurs[gridX] &&
                tabMurs[gridX][gridZ] === 1 &&
                getPoints() >= 10
              ) {
                animationMur(gridZ, gridX);
              }
            }
          }
        }
      }

      function handleChestInteraction(camera) {
        if (isNearTresor(camera)) {
          // Calculate bonus points based on remaining time
          const remainingSeconds = getSecondsLeft();
          const bonusPoints = 10 * remainingSeconds;
          pauseTimer();
          playMysteryBoxMusic();
          mysteryBoxMusic.onended = () => {
            isChestInteractionLocked = false;
            prochainNiveau();
            updatePoint(true, bonusPoints); // Add bonus points
          };
        }
      }

      function cameraDansMur(camera) {
        // Get the camera's current position
        var cameraX = getPositionCameraX(camera);
        var cameraZ = getPositionCameraZ(camera);

        // Add buffer distance
        const WALL_BUFFER = 0.1;

        // Check grid positions around the camera (including buffer)
        const positions = [
          {
            x: Math.floor(cameraX - WALL_BUFFER),
            z: Math.floor(cameraZ - WALL_BUFFER),
          },
          {
            x: Math.floor(cameraX - WALL_BUFFER),
            z: Math.floor(cameraZ + WALL_BUFFER),
          },
          {
            x: Math.floor(cameraX + WALL_BUFFER),
            z: Math.floor(cameraZ - WALL_BUFFER),
          },
          {
            x: Math.floor(cameraX + WALL_BUFFER),
            z: Math.floor(cameraZ + WALL_BUFFER),
          },
        ];

        // Check each position for walls
        for (const pos of positions) {
          // Check bounds
          if (
            pos.z < 0 ||
            pos.z >= tabMurs.length ||
            pos.x < 0 ||
            pos.x >= tabMurs[0].length
          ) {
            return true; // Out of bounds collision
          }

          // Check for wall
          if (tabMurs[pos.x][pos.z] === 1 || tabMurs[pos.x][pos.z] === 2) {
            // add tabMurs[pos.x][pos.z] === 4 for after player leaves spawn room
            return true; // Collision with inner wall
          } else if (outsideSpawnRoom) {
            if (
              tabMurs[pos.x][pos.z] === 1 ||
              tabMurs[pos.x][pos.z] === 2 ||
              tabMurs[pos.x][pos.z] === 4
            ) {
              return true; // Collision with inner wall
            }
          }
        }

        return false; // No collision
      }

      function collisionTresor(camera) {
        const cameraX = Math.floor(getPositionCameraX(camera));
        const cameraZ = Math.floor(getPositionCameraZ(camera));

        const tresorX = Math.floor(
          getPositionX(objScene3D.tabObjets3D[OBJ3D_TRESOR].transformations)
        );
        const tresorZ = Math.floor(
          getPositionZ(objScene3D.tabObjets3D[OBJ3D_TRESOR].transformations)
        );

        return cameraX === tresorX && cameraZ === tresorZ;
      }

      function resetOrNextLevel(isNextLevel) {
        // Check if player has completed all levels
        if (isNextLevel && currentLevel >= MAX_LEVELS) {
            gameComplete();
            return;
        }

        if (isTimerPaused()) {
            resumeTimer();
        }
        outsideSpawnRoom = false;

        // Create a deep copy of the original map
        tabMurs = tabMapOriginal.map((row) => [...row]);

        // Save pointers for internal walls and sky
        var objMursInternes = objScene3D.tabObjets3D[OBJ3D_MURS_INTERNES];
        var objMurSpawn = objScene3D.tabObjets3D[OBJ3D_MURS_SPAWN];
        var objMurSpawnDoor = objScene3D.tabObjets3D[OBJ3D_MURS_INTERNES_DOOR];
        var objCiel = objScene3D.tabObjets3D.find((obj) => obj === obj3DCiel);

        // Keep walls, ground, and sky
        objScene3D.tabObjets3D = objScene3D.tabObjets3D.filter(
            (obj3D, index) => {
                return (
                    index === OBJ3D_SOL || index === OBJ3D_MURS || obj3D === objCiel
                );
            }
        );

        // Recreate internal walls
        var obj3DMursInternes = creerObj3DMursInternes(objgl, TEX_MUR);
        objScene3D.tabObjets3D.push(obj3DMursInternes);
        OBJ3D_MURS_INTERNES = objScene3D.tabObjets3D.length - 1;
        objScene3D.tabObjets3D.push(objMurSpawn);
        OBJ3D_MURS_SPAWN = objScene3D.tabObjets3D.length - 1;

        objScene3D.tabObjets3D.push(objMurSpawnDoor);
        OBJ3D_MURS_INTERNES_DOOR = objScene3D.tabObjets3D.length - 1;

        // Reset arrow positions
        positionFleches = [];

        // Create or restore the treasure
        let obj3DTresor;
        if (isNextLevel || !savedLevelObjects.chest) {
            obj3DTresor = creerobj3DTresor(
                objgl,
                objScene3D.tabObjets3D[OBJ3D_MURS],
                TEX_TRESOR
            );
            savedLevelObjects.chest = getPositionsXYZ(obj3DTresor.transformations);
        } else {
            obj3DTresor = creerobj3DTresor(
                objgl,
                objScene3D.tabObjets3D[OBJ3D_MURS],
                TEX_TRESOR
            );
            setPositionsXYZ(savedLevelObjects.chest, obj3DTresor.transformations);
        }
        objScene3D.tabObjets3D.push(obj3DTresor);
        OBJ3D_TRESOR = objScene3D.tabObjets3D.length - 1;

        // Create or restore arrows
        if (isNextLevel || savedLevelObjects.arrows.length === 0) {
            savedLevelObjects.arrows = [];
            for (let i = 0; i < nbrFleches; i++) {
                const obj3DFleche = creerobj3DFleche(
                    objgl,
                    getPositionZ(obj3DTresor.transformations),
                    getPositionX(obj3DTresor.transformations)
                );
                savedLevelObjects.arrows.push(
                    getPositionsXYZ(obj3DFleche.transformations)
                );
                objScene3D.tabObjets3D.push(obj3DFleche);
            }
        } else {
            savedLevelObjects.arrows.forEach((arrowPos) => {
                const obj3DFleche = creerobj3DFleche(
                    objgl,
                    arrowPos[2],
                    arrowPos[0]
                );
                setPositionsXYZ(arrowPos, obj3DFleche.transformations);
                objScene3D.tabObjets3D.push(obj3DFleche);
            });
        }

        // Reset teleporters array before creating new ones
        resetTeleport();

        // Create or restore teleporters
        if (isNextLevel || savedLevelObjects.teleporters.length === 0) {
            savedLevelObjects.teleporters = [];
            for (let i = 0; i < nbTeleporteur; i++) {
                const obj3DTeleporteurs = creerObj3DTeleporteur(
                    objgl,
                    TEX_TELEPORTEUR,
                    nbTeleporteur
                );
                savedLevelObjects.teleporters.push(
                    getPositionsXYZ(obj3DTeleporteurs.transformations)
                );
                objScene3D.tabObjets3D.push(obj3DTeleporteurs);
            }
        } else {
            savedLevelObjects.teleporters.forEach((teleporterPos) => {
                const obj3DTeleporteurs = creerObj3DTeleporteur(
                    objgl,
                    TEX_TELEPORTEUR,
                    nbTeleporteur
                );
                setPositionsXYZ(teleporterPos, obj3DTeleporteurs.transformations);
                objScene3D.tabObjets3D.push(obj3DTeleporteurs);
            });
        }

        // Create or restore receivers
        if (isNextLevel || savedLevelObjects.receivers.length === 0) {
            savedLevelObjects.receivers = [];
            for (let i = 0; i < nbReciever; i++) {
                const obj3DReciever = creerObj3DReciever(
                    objgl,
                    TEX_RECIEVER,
                    nbReciever
                );
                savedLevelObjects.receivers.push(
                    getPositionsXYZ(obj3DReciever.transformations)
                );
                objScene3D.tabObjets3D.push(obj3DReciever);
            }
        } else {
            savedLevelObjects.receivers.forEach((receiverPos) => {
                const obj3DReciever = creerObj3DReciever(
                    objgl,
                    TEX_RECIEVER,
                    nbReciever
                );
                setPositionsXYZ(receiverPos, obj3DReciever.transformations);
                objScene3D.tabObjets3D.push(obj3DReciever);
            });
        }

        // Update treasure coordinates
        var tresorZ = getPositionZ(obj3DTresor.transformations);
        var tresorX = getPositionX(obj3DTresor.transformations);

        // Reduce the number of arrows if it's the next levels
        if (isNextLevel && nbrFleches > 0) nbrFleches -= 2;

        // Reset the camera
        var camera = objScene3D.camera;
        resetCamera(camera, objScene3D);

        // Reset the timer
        startTime = createDate();
        resetSeconds();
        setTimerMax(timerLength);

        // Update level display
        updateLevelDisplay();

        // Reset interaction lock
        isChestInteractionLocked = false;

        // Show level announcement
        const announcement = document.getElementById("levelAnnouncement");
        announcement.textContent = `NIVEAU ${currentLevel}`;
        announcement.classList.add("visible");

        // Play new round music for both reset and next level
        playNewRoundMusic();

        // Remove the visible class after animation completes
        setTimeout(() => {
            announcement.classList.remove("visible");
        }, 3000); // 3 seconds to match CSS animation duration

        if (isNextLevel) {
            if (currentLevel % 2 == 1) {
                nbrOuvreursMurs--;
            }
            nbrOuvreursMursUtilises = nbrOuvreursMurs;
        } else {
            nbrOuvreursMursUtilises = nbrOuvreursMurs;
        }

        showWallTries();

        console.log("=== Object Counts ===");
        console.log("Arrows:", nbrFleches);
        console.log("Teleporters:", nbTeleporteur);
        console.log("Receivers:", nbReciever);
        console.log("Treasure Chests: 1");
        console.log("==================");
      }

      // Add this function to update the level display
      function updateLevelDisplay() {
        const levelDisplay = document.getElementById("levelDisplay");
        levelDisplay.textContent = `Niveau ${currentLevel}`;
      }

      // Add new game complete function
      function gameComplete() {
        // Stop animation
        cancelAnimationFrame(objCycleAnimation);

        // Show completion announcement
        const announcement = document.getElementById("levelAnnouncement");
        announcement.textContent = "CONGRATULATIONS";
        announcement.classList.add("visible");

        // Stop all audio
        pauseBackgroundMusic();

        // Disable controls
        isChestInteractionLocked = true;
        binAriel = false;

        // Show final score
        const finalScore = getPoints();
        setTimeout(() => {
          announcement.textContent = `Score final : ${finalScore}`;
        }, 3000);

        // Restart game after delay
        setTimeout(() => {
          location.reload();
        }, 8000);
      }

      // Use the helper function
      async function resetNiveau() {
        // Check for game over condition
        if (getPoints() < 200) {
          // Game over
          gameOver();
          return;
        }

        // If in aerial view, reset to ground view
        if (binAriel) {
          const camera = objScene3D.camera;
          setPositionsCameraXYZ(tabPosJoueurInitial, camera);
          setCiblesCameraXYZ(tabCibleJoueurInitial, camera);
          setOrientationX(0, camera);
          updateHauteurCiel(2, obj3DCiel);
          binAriel = false;
          objScene3D.obj3DJoueur = null;
        }

        // Pass false for isNextLevel but maintain current level
        const currentLevelBackup = currentLevel;
        resetOrNextLevel(false);
        currentLevel = currentLevelBackup; // Restore the current level

        // Update level display to show correct level
        const announcement = document.getElementById("levelAnnouncement");
        announcement.textContent = `NIVEAU ${currentLevel}`;
        updateLevelDisplay();
      }

      async function prochainNiveau() {
        resetOrNextLevel(true);
      }

      function collisionTeleporteur(camera) {
        const cameraX = Math.floor(getPositionCameraX(camera));
        const cameraZ = Math.floor(getPositionCameraZ(camera));

        const tabTeleporteurs = getTabTeleports();
        const tabReceveurs = getTabReceveurs();

        // Use a map for O(1) lookup
        for (let i = 0; i < tabTeleporteurs.length; i++) {
          const t = tabTeleporteurs[i];
          if (t.x === cameraX && t.z === cameraZ) {
            const r =
              tabReceveurs[Math.floor(Math.random() * tabReceveurs.length)];
            setPositionsCameraXYZ([r.x + 0.5, 0.5, r.z + 0.5], camera);
            playPortalSound(); // Play the portal sound when teleporting
            return true;
          }
        }

        return false;
      }

      function resetCamera(camera, objScene3D) {
        const centerX = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2;
        const centerZ = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2;

        // Reset camera position, target, and orientation
        setPositionsCameraXYZ([centerX, 0.5, centerZ], camera);
        setCiblesCameraXYZ([centerX, 0.5, centerZ - 1], camera);
        setOrientationsXYZ([0, 1, 0], camera);
      }

      // Add new game over function
      function gameOver() {
        // Stop animation
        cancelAnimationFrame(objCycleAnimation);

        // Stop all audio
        pauseBackgroundMusic();

        // Disable controls
        isChestInteractionLocked = true;
        binAriel = false;

        // Show game over screen
        showGameOver();
      }

      function handleKeyUp(event) {
        delete keysPressed[event.code];

        // If no movement keys are pressed, stop footsteps
        if (
          !keysPressed["KeyW"] &&
          !keysPressed["KeyS"] &&
          !keysPressed["KeyA"] &&
          !keysPressed["KeyD"]
        ) {
          stopWalking();
        }
      }

      function updateInteractionPrompt() {
        const prompt = document.getElementById("interactionPrompt");
        if (isNearTresor(objScene3D.camera) && !isChestInteractionLocked) {
          prompt.classList.add("visible");
        } else {
          prompt.classList.remove("visible");
        }
      }

      function isNearTresor(camera) {
        const cameraX = getPositionCameraX(camera);
        const cameraZ = getPositionCameraZ(camera);

        const tresorX = getPositionX(
          objScene3D.tabObjets3D[OBJ3D_TRESOR].transformations
        );
        const tresorZ = getPositionZ(
          objScene3D.tabObjets3D[OBJ3D_TRESOR].transformations
        );

        const distance = Math.sqrt(
          Math.pow(cameraX - tresorX, 2) + Math.pow(cameraZ - tresorZ, 2)
        );

        return distance < 1; 
      }

      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);

    function showWallTries() {
      document.getElementById("wallTries").innerHTML = nbrOuvreursMursUtilises + "/" + nbrOuvreursMurs + " ouvreurs";
    }

  </script>
</head>


<body class="background">
  <canvas id="monCanvas" width="1600" height="800" tabindex="1"></canvas>
  <div id="canvasContainer" class="game-ui hidden">
    <div id="timer">
        <div class="timer-container">
            <div class="timer-bar">
                <div class="timer-progress"></div>
            </div>
        </div>
    </div>
    <div id="points"></div>
    <div id="interactionPrompt">Appuyer sur 'E' pour ouvrir le trÃ©sor</div>
    <div id="levelAnnouncement">Niveau 1</div>
    <div id="wallTries"></div>
    <div id="levelDisplay">Level 1</div>
  </div>

  <div id="mainMenu" class="menu-overlay">
    <div class="menu-content">
        <h1>THESAURUS</h1>
        <button id="startGame">Jouer</button>
    </div>
  </div>
</body>

</html>
